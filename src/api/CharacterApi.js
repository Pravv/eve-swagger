/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetCharactersCharacterIdAgentsResearch200Ok', 'model/GetCharactersCharacterIdAgentsResearchForbidden', 'model/GetCharactersCharacterIdAgentsResearchInternalServerError', 'model/GetCharactersCharacterIdBlueprints200Ok', 'model/GetCharactersCharacterIdBlueprintsForbidden', 'model/GetCharactersCharacterIdBlueprintsInternalServerError', 'model/GetCharactersCharacterIdChatChannels200Ok', 'model/GetCharactersCharacterIdChatChannelsForbidden', 'model/GetCharactersCharacterIdChatChannelsInternalServerError', 'model/GetCharactersCharacterIdCorporationhistory200Ok', 'model/GetCharactersCharacterIdCorporationhistoryInternalServerError', 'model/GetCharactersCharacterIdInternalServerError', 'model/GetCharactersCharacterIdMedals200Ok', 'model/GetCharactersCharacterIdMedalsForbidden', 'model/GetCharactersCharacterIdMedalsInternalServerError', 'model/GetCharactersCharacterIdNotFound', 'model/GetCharactersCharacterIdOk', 'model/GetCharactersCharacterIdPortraitInternalServerError', 'model/GetCharactersCharacterIdPortraitNotFound', 'model/GetCharactersCharacterIdPortraitOk', 'model/GetCharactersCharacterIdRolesForbidden', 'model/GetCharactersCharacterIdRolesInternalServerError', 'model/GetCharactersCharacterIdStandings200Ok', 'model/GetCharactersCharacterIdStandingsForbidden', 'model/GetCharactersCharacterIdStandingsInternalServerError', 'model/GetCharactersNames200Ok', 'model/GetCharactersNamesInternalServerError', 'model/PostCharactersAffiliation200Ok', 'model/PostCharactersAffiliationInternalServerError', 'model/PostCharactersAffiliationUnprocessableEntity', 'model/PostCharactersCharacterIdCspaCharacters', 'model/PostCharactersCharacterIdCspaCreated', 'model/PostCharactersCharacterIdCspaForbidden', 'model/PostCharactersCharacterIdCspaInternalServerError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetCharactersCharacterIdAgentsResearch200Ok'), require('../model/GetCharactersCharacterIdAgentsResearchForbidden'), require('../model/GetCharactersCharacterIdAgentsResearchInternalServerError'), require('../model/GetCharactersCharacterIdBlueprints200Ok'), require('../model/GetCharactersCharacterIdBlueprintsForbidden'), require('../model/GetCharactersCharacterIdBlueprintsInternalServerError'), require('../model/GetCharactersCharacterIdChatChannels200Ok'), require('../model/GetCharactersCharacterIdChatChannelsForbidden'), require('../model/GetCharactersCharacterIdChatChannelsInternalServerError'), require('../model/GetCharactersCharacterIdCorporationhistory200Ok'), require('../model/GetCharactersCharacterIdCorporationhistoryInternalServerError'), require('../model/GetCharactersCharacterIdInternalServerError'), require('../model/GetCharactersCharacterIdMedals200Ok'), require('../model/GetCharactersCharacterIdMedalsForbidden'), require('../model/GetCharactersCharacterIdMedalsInternalServerError'), require('../model/GetCharactersCharacterIdNotFound'), require('../model/GetCharactersCharacterIdOk'), require('../model/GetCharactersCharacterIdPortraitInternalServerError'), require('../model/GetCharactersCharacterIdPortraitNotFound'), require('../model/GetCharactersCharacterIdPortraitOk'), require('../model/GetCharactersCharacterIdRolesForbidden'), require('../model/GetCharactersCharacterIdRolesInternalServerError'), require('../model/GetCharactersCharacterIdStandings200Ok'), require('../model/GetCharactersCharacterIdStandingsForbidden'), require('../model/GetCharactersCharacterIdStandingsInternalServerError'), require('../model/GetCharactersNames200Ok'), require('../model/GetCharactersNamesInternalServerError'), require('../model/PostCharactersAffiliation200Ok'), require('../model/PostCharactersAffiliationInternalServerError'), require('../model/PostCharactersAffiliationUnprocessableEntity'), require('../model/PostCharactersCharacterIdCspaCharacters'), require('../model/PostCharactersCharacterIdCspaCreated'), require('../model/PostCharactersCharacterIdCspaForbidden'), require('../model/PostCharactersCharacterIdCspaInternalServerError'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.CharacterApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.GetCharactersCharacterIdAgentsResearch200Ok, root.EveSwaggerInterface.GetCharactersCharacterIdAgentsResearchForbidden, root.EveSwaggerInterface.GetCharactersCharacterIdAgentsResearchInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdBlueprints200Ok, root.EveSwaggerInterface.GetCharactersCharacterIdBlueprintsForbidden, root.EveSwaggerInterface.GetCharactersCharacterIdBlueprintsInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdChatChannels200Ok, root.EveSwaggerInterface.GetCharactersCharacterIdChatChannelsForbidden, root.EveSwaggerInterface.GetCharactersCharacterIdChatChannelsInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdCorporationhistory200Ok, root.EveSwaggerInterface.GetCharactersCharacterIdCorporationhistoryInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdMedals200Ok, root.EveSwaggerInterface.GetCharactersCharacterIdMedalsForbidden, root.EveSwaggerInterface.GetCharactersCharacterIdMedalsInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdNotFound, root.EveSwaggerInterface.GetCharactersCharacterIdOk, root.EveSwaggerInterface.GetCharactersCharacterIdPortraitInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdPortraitNotFound, root.EveSwaggerInterface.GetCharactersCharacterIdPortraitOk, root.EveSwaggerInterface.GetCharactersCharacterIdRolesForbidden, root.EveSwaggerInterface.GetCharactersCharacterIdRolesInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdStandings200Ok, root.EveSwaggerInterface.GetCharactersCharacterIdStandingsForbidden, root.EveSwaggerInterface.GetCharactersCharacterIdStandingsInternalServerError, root.EveSwaggerInterface.GetCharactersNames200Ok, root.EveSwaggerInterface.GetCharactersNamesInternalServerError, root.EveSwaggerInterface.PostCharactersAffiliation200Ok, root.EveSwaggerInterface.PostCharactersAffiliationInternalServerError, root.EveSwaggerInterface.PostCharactersAffiliationUnprocessableEntity, root.EveSwaggerInterface.PostCharactersCharacterIdCspaCharacters, root.EveSwaggerInterface.PostCharactersCharacterIdCspaCreated, root.EveSwaggerInterface.PostCharactersCharacterIdCspaForbidden, root.EveSwaggerInterface.PostCharactersCharacterIdCspaInternalServerError);
  }
}(this, function(ApiClient, GetCharactersCharacterIdAgentsResearch200Ok, GetCharactersCharacterIdAgentsResearchForbidden, GetCharactersCharacterIdAgentsResearchInternalServerError, GetCharactersCharacterIdBlueprints200Ok, GetCharactersCharacterIdBlueprintsForbidden, GetCharactersCharacterIdBlueprintsInternalServerError, GetCharactersCharacterIdChatChannels200Ok, GetCharactersCharacterIdChatChannelsForbidden, GetCharactersCharacterIdChatChannelsInternalServerError, GetCharactersCharacterIdCorporationhistory200Ok, GetCharactersCharacterIdCorporationhistoryInternalServerError, GetCharactersCharacterIdInternalServerError, GetCharactersCharacterIdMedals200Ok, GetCharactersCharacterIdMedalsForbidden, GetCharactersCharacterIdMedalsInternalServerError, GetCharactersCharacterIdNotFound, GetCharactersCharacterIdOk, GetCharactersCharacterIdPortraitInternalServerError, GetCharactersCharacterIdPortraitNotFound, GetCharactersCharacterIdPortraitOk, GetCharactersCharacterIdRolesForbidden, GetCharactersCharacterIdRolesInternalServerError, GetCharactersCharacterIdStandings200Ok, GetCharactersCharacterIdStandingsForbidden, GetCharactersCharacterIdStandingsInternalServerError, GetCharactersNames200Ok, GetCharactersNamesInternalServerError, PostCharactersAffiliation200Ok, PostCharactersAffiliationInternalServerError, PostCharactersAffiliationUnprocessableEntity, PostCharactersCharacterIdCspaCharacters, PostCharactersCharacterIdCspaCreated, PostCharactersCharacterIdCspaForbidden, PostCharactersCharacterIdCspaInternalServerError) {
  'use strict';

  /**
   * Character service.
   * @module api/CharacterApi
   * @version 0.5.0
   */

  /**
   * Constructs a new CharacterApi. 
   * @alias module:api/CharacterApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCharactersCharacterId operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character&#39;s public information
     * Public information about a character  ---  Alternate route: &#x60;/v4/characters/{character_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersCharacterIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdOk}
     */
    this.getCharactersCharacterId = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterId");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCharactersCharacterIdOk;

      return this.apiClient.callApi(
        '/characters/{character_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdAgentsResearch operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdAgentsResearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdAgentsResearch200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get agents research
     * Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints &#x3D; remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  ---  Alternate route: &#x60;/v1/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/agents_research/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/agents_research/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} characterId ID for a character
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersCharacterIdAgentsResearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdAgentsResearch200Ok>}
     */
    this.getCharactersCharacterIdAgentsResearch = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdAgentsResearch");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersCharacterIdAgentsResearch200Ok];

      return this.apiClient.callApi(
        '/characters/{character_id}/agents_research/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdBlueprints operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdBlueprintsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdBlueprints200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get blueprints
     * Return a list of blueprints the character has  ---  Alternate route: &#x60;/v1/characters/{character_id}/blueprints/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/blueprints/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/blueprints/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} characterId ID for a character
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersCharacterIdBlueprintsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdBlueprints200Ok>}
     */
    this.getCharactersCharacterIdBlueprints = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdBlueprints");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersCharacterIdBlueprints200Ok];

      return this.apiClient.callApi(
        '/characters/{character_id}/blueprints/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdChatChannels operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdChatChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdChatChannels200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get chat channels
     * Return chat channels that a character is the owner or an operator of  ---  Alternate route: &#x60;/v1/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/chat_channels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/chat_channels/&#x60;   ---  This route is cached for up to 300 seconds
     * @param {Number} characterId ID for a character
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersCharacterIdChatChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdChatChannels200Ok>}
     */
    this.getCharactersCharacterIdChatChannels = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdChatChannels");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersCharacterIdChatChannels200Ok];

      return this.apiClient.callApi(
        '/characters/{character_id}/chat_channels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdCorporationhistory operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdCorporationhistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdCorporationhistory200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation history
     * Get a list of all the corporations a character has been a member of  ---  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/corporationhistory/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersCharacterIdCorporationhistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdCorporationhistory200Ok>}
     */
    this.getCharactersCharacterIdCorporationhistory = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdCorporationhistory");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersCharacterIdCorporationhistory200Ok];

      return this.apiClient.callApi(
        '/characters/{character_id}/corporationhistory/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdMedals operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdMedalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdMedals200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get medals
     * Return a list of medals the character has  ---  Alternate route: &#x60;/v1/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/medals/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/medals/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} characterId ID for a character
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersCharacterIdMedalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdMedals200Ok>}
     */
    this.getCharactersCharacterIdMedals = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdMedals");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersCharacterIdMedals200Ok];

      return this.apiClient.callApi(
        '/characters/{character_id}/medals/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdPortrait operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdPortraitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdPortraitOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character portraits
     * Get portrait urls for a character  ---  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/portrait/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersCharacterIdPortraitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdPortraitOk}
     */
    this.getCharactersCharacterIdPortrait = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdPortrait");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCharactersCharacterIdPortraitOk;

      return this.apiClient.callApi(
        '/characters/{character_id}/portrait/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdRoles operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character corporation roles
     * Returns a character&#39;s corporation roles  ---  Alternate route: &#x60;/v1/characters/{character_id}/roles/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/roles/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/roles/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} characterId A character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersCharacterIdRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getCharactersCharacterIdRoles = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdRoles");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/characters/{character_id}/roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdStandings operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdStandingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdStandings200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get standings
     * Return character standings from agents, NPC corporations, and factions  ---  Alternate route: &#x60;/v1/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/standings/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/standings/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} characterId ID for a character
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersCharacterIdStandingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdStandings200Ok>}
     */
    this.getCharactersCharacterIdStandings = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling getCharactersCharacterIdStandings");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersCharacterIdStandings200Ok];

      return this.apiClient.callApi(
        '/characters/{character_id}/standings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersNames operation.
     * @callback module:api/CharacterApi~getCharactersNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersNames200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character names
     * Resolve a set of character IDs to character names  ---  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/dev/characters/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Array.<Number>} characterIds A comma separated list of character IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~getCharactersNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersNames200Ok>}
     */
    this.getCharactersNames = function(characterIds, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterIds' is set
      if (characterIds == undefined || characterIds == null) {
        throw new Error("Missing the required parameter 'characterIds' when calling getCharactersNames");
      }


      var pathParams = {
      };
      var queryParams = {
        'character_ids': this.apiClient.buildCollectionParam(characterIds, 'multi'),
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersNames200Ok];

      return this.apiClient.callApi(
        '/characters/names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersAffiliation operation.
     * @callback module:api/CharacterApi~postCharactersAffiliationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostCharactersAffiliation200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Character affiliation
     * Bulk lookup of character IDs to corporation, alliance and faction  ---  Alternate route: &#x60;/v1/characters/affiliation/&#x60;  Alternate route: &#x60;/legacy/characters/affiliation/&#x60;  Alternate route: &#x60;/dev/characters/affiliation/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Array.<module:model/Number>} characters The character IDs to fetch affiliations for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~postCharactersAffiliationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostCharactersAffiliation200Ok>}
     */
    this.postCharactersAffiliation = function(characters, opts, callback) {
      opts = opts || {};
      var postBody = characters;

      // verify the required parameter 'characters' is set
      if (characters == undefined || characters == null) {
        throw new Error("Missing the required parameter 'characters' when calling postCharactersAffiliation");
      }


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PostCharactersAffiliation200Ok];

      return this.apiClient.callApi(
        '/characters/affiliation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersCharacterIdCspa operation.
     * @callback module:api/CharacterApi~postCharactersCharacterIdCspaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostCharactersCharacterIdCspaCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate a CSPA charge cost
     * Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  ---  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/cspa/&#x60; 
     * @param {Number} characterId An EVE character ID
     * @param {module:model/PostCharactersCharacterIdCspaCharacters} characters The target characters to calculate the charge for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CharacterApi~postCharactersCharacterIdCspaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostCharactersCharacterIdCspaCreated}
     */
    this.postCharactersCharacterIdCspa = function(characterId, characters, opts, callback) {
      opts = opts || {};
      var postBody = characters;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw new Error("Missing the required parameter 'characterId' when calling postCharactersCharacterIdCspa");
      }

      // verify the required parameter 'characters' is set
      if (characters == undefined || characters == null) {
        throw new Error("Missing the required parameter 'characters' when calling postCharactersCharacterIdCspa");
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PostCharactersCharacterIdCspaCreated;

      return this.apiClient.callApi(
        '/characters/{character_id}/cspa/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
