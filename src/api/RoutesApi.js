/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetRouteOriginDestinationInternalServerError', 'model/GetRouteOriginDestinationNotFound'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetRouteOriginDestinationInternalServerError'), require('../model/GetRouteOriginDestinationNotFound'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.RoutesApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.GetRouteOriginDestinationInternalServerError, root.EveSwaggerInterface.GetRouteOriginDestinationNotFound);
  }
}(this, function(ApiClient, GetRouteOriginDestinationInternalServerError, GetRouteOriginDestinationNotFound) {
  'use strict';

  /**
   * Routes service.
   * @module api/RoutesApi
   * @version 0.5.0
   */

  /**
   * Constructs a new RoutesApi. 
   * @alias module:api/RoutesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getRouteOriginDestination operation.
     * @callback module:api/RoutesApi~getRouteOriginDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get route
     * Get the systems between origin and destination  ---  Alternate route: &#x60;/legacy/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/dev/route/{origin}/{destination}/&#x60;  Alternate route: &#x60;/v1/route/{origin}/{destination}/&#x60;   ---  This route is cached for up to 86400 seconds
     * @param {Number} destination destination solar system ID
     * @param {Number} origin origin solar system ID
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.avoid avoid solar system ID(s)
     * @param {Array.<module:model/[Number]>} opts.connections connected solar system pairs
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.flag route security preference (default to shortest)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/RoutesApi~getRouteOriginDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getRouteOriginDestination = function(destination, origin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'destination' is set
      if (destination == undefined || destination == null) {
        throw new Error("Missing the required parameter 'destination' when calling getRouteOriginDestination");
      }

      // verify the required parameter 'origin' is set
      if (origin == undefined || origin == null) {
        throw new Error("Missing the required parameter 'origin' when calling getRouteOriginDestination");
      }


      var pathParams = {
        'destination': destination,
        'origin': origin
      };
      var queryParams = {
        'avoid': this.apiClient.buildCollectionParam(opts['avoid'], 'multi'),
        'connections': this.apiClient.buildCollectionParam(opts['connections'], 'multi'),
        'datasource': opts['datasource'],
        'flag': opts['flag'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/route/{origin}/{destination}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
